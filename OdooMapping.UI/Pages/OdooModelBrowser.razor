@page "/odoo-model-browser"
@using OdooMapping.Domain.Models
@using OdooMapping.UI.Services
@using Npgsql
@inject DatabaseService DatabaseService

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h3><i class="bi bi-diagram-3 me-2"></i>Odoo Model Browser</h3>
            </div>
            <hr />
            <p class="lead">Browse Odoo models and understand their relationships to create accurate mappings.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-database me-2"></i>Odoo PostgreSQL Database Connection</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Connection String:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="PostgresConnectionString" placeholder="Host=localhost;Port=5432;Database=odoo;Username=odoo;Password=odoo;" />
                            <button class="btn btn-outline-primary" @onclick="TestConnection">
                                <i class="bi bi-check-circle me-1"></i> Test Connection
                            </button>
                        </div>
                        @if (ConnectionTested)
                        {
                            <div class="mt-2">
                                <span class="@(ConnectionValid ? "text-success" : "text-danger")">
                                    <i class="bi @(ConnectionValid ? "bi-check-circle-fill" : "bi-exclamation-circle-fill")"></i>
                                    @(ConnectionValid ? "Connection successful!" : "Connection failed!")
                                </span>
                            </div>
                        }
                    </div>

                    @if (ConnectionValid)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Database:</label>
                                    <select class="form-select" @bind="SelectedDatabase" @bind:after="LoadModules">
                                        <option value="">-- Select Database --</option>
                                        @foreach (var db in Databases)
                                        {
                                            <option value="@db">@db</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(SelectedDatabase) && Modules.Any())
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="bi bi-grid-3x3-gap me-2"></i>Installed Odoo Modules</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Module Name</th>
                                        <th>Description</th>
                                        <th>Version</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var module in Modules.OrderBy(m => m.Name))
                                    {
                                        <tr>
                                            <td>@module.Name</td>
                                            <td>@module.Description</td>
                                            <td>@module.Version</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-table me-2"></i>Odoo Models</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" style="max-height: 600px; overflow-y: auto;">
                            <div class="input-group sticky-top bg-light p-2">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search models..." @bind="ModelSearchTerm" @bind:event="oninput" />
                            </div>
                            @foreach (var model in FilteredModels)
                            {
                                <button class="list-group-item list-group-item-action @(model.Model == SelectedModel?.Model ? "active" : "")" 
                                        @onclick="() => SelectModel(model)">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@model.Name</strong>
                                            <div class="small text-muted">@model.Model</div>
                                        </div>
                                        <span class="badge bg-secondary">@(model.IsTransient ? "Transient" : "Permanent")</span>
                                    </div>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                @if (SelectedModel != null)
                {
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-layout-text-window me-2"></i>
                                Model: @SelectedModel.Name (@SelectedModel.Model)
                            </h5>
                        </div>
                        <div class="card-body">
                            <ul class="nav nav-tabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="fields-tab" data-bs-toggle="tab" data-bs-target="#fields" 
                                            type="button" role="tab" aria-controls="fields" aria-selected="true">
                                        Fields
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="relations-tab" data-bs-toggle="tab" data-bs-target="#relations" 
                                            type="button" role="tab" aria-controls="relations" aria-selected="false">
                                        Relations
                                    </button>
                                </li>
                            </ul>
                            <div class="tab-content p-3 border border-top-0 rounded-bottom">
                                <div class="tab-pane fade show active" id="fields" role="tabpanel" aria-labelledby="fields-tab">
                                    <div class="table-responsive">
                                        <div class="mb-2">
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                                <input type="text" class="form-control form-control-sm" placeholder="Search fields..." @bind="FieldSearchTerm" @bind:event="oninput" />
                                            </div>
                                        </div>
                                        <table class="table table-sm table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Field Name</th>
                                                    <th>Description</th>
                                                    <th>Type</th>
                                                    <th>Required</th>
                                                    <th>Readonly</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var field in FilteredFields)
                                                {
                                                    <tr class="@(field.IsRelationalField ? "table-info" : "")">
                                                        <td>@field.Name</td>
                                                        <td>@field.Description</td>
                                                        <td>@field.GetTypeDescription()</td>
                                                        <td>
                                                            @if (field.Required)
                                                            {
                                                                <i class="bi bi-check-circle-fill text-success"></i>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (field.ReadOnly)
                                                            {
                                                                <i class="bi bi-check-circle-fill text-warning"></i>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="relations" role="tabpanel" aria-labelledby="relations-tab">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <h5 class="card-title">Relational Fields</h5>
                                            @if (RelationalFields.Any())
                                            {
                                                <div class="list-group mb-4">
                                                    @foreach (var field in RelationalFields)
                                                    {
                                                        <div class="list-group-item">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <div>
                                                                    <h6 class="mb-1">@field.Name</h6>
                                                                    <p class="mb-1">@field.GetTypeDescription()</p>
                                                                </div>
                                                                @if (!string.IsNullOrEmpty(field.Relation))
                                                                {
                                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToRelatedModel(field.Relation)">
                                                                        View Model
                                                                    </button>
                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-info">
                                                    This model does not have any relational fields.
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card shadow-sm">
                        <div class="card-body text-center p-5">
                            <i class="bi bi-arrow-left-circle text-muted" style="font-size: 3rem;"></i>
                            <h5 class="mt-3">Select a model from the list</h5>
                            <p class="text-muted">Model details will be displayed here</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    // Connection variables
    private string PostgresConnectionString { get; set; } = "";
    private bool ConnectionTested { get; set; }
    private bool ConnectionValid { get; set; }
    private List<string> Databases { get; set; } = new List<string>();
    private string SelectedDatabase { get; set; } = "";

    // Odoo data
    private List<OdooModule> Modules { get; set; } = new List<OdooModule>();
    private List<OdooModel> Models { get; set; } = new List<OdooModel>();
    private OdooModel SelectedModel { get; set; }

    // Search and filtering
    private string ModelSearchTerm { get; set; } = "";
    private string FieldSearchTerm { get; set; } = "";

    private IEnumerable<OdooModel> FilteredModels => 
        string.IsNullOrWhiteSpace(ModelSearchTerm) 
            ? Models
            : Models.Where(m => 
                m.Name.Contains(ModelSearchTerm, StringComparison.OrdinalIgnoreCase) || 
                m.Model.Contains(ModelSearchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<OdooField> FilteredFields => 
        string.IsNullOrWhiteSpace(FieldSearchTerm) 
            ? SelectedModel?.Fields 
            : SelectedModel?.Fields.Where(f => 
                f.Name.Contains(FieldSearchTerm, StringComparison.OrdinalIgnoreCase) || 
                (f.Description != null && f.Description.Contains(FieldSearchTerm, StringComparison.OrdinalIgnoreCase)));

    private IEnumerable<OdooField> RelationalFields => 
        SelectedModel?.Fields.Where(f => f.IsRelationalField) ?? Enumerable.Empty<OdooField>();

    private async Task TestConnection()
    {
        try
        {
            ConnectionValid = await DatabaseService.TestPostgresConnectionAsync(PostgresConnectionString);
            ConnectionTested = true;

            if (ConnectionValid)
            {
                Databases = await DatabaseService.GetPostgresDatabasesAsync(PostgresConnectionString);
            }
        }
        catch
        {
            ConnectionValid = false;
            ConnectionTested = true;
        }
    }

    private async Task LoadModules()
    {
        if (!string.IsNullOrEmpty(SelectedDatabase))
        {
            var builder = new NpgsqlConnectionStringBuilder(PostgresConnectionString);
            builder.Database = SelectedDatabase;
            var connectionString = builder.ConnectionString;

            // Load modules
            Modules = await DatabaseService.GetInstalledOdooModulesAsync(connectionString);

            // Load models
            Models = await DatabaseService.GetOdooModelsAsync(connectionString);

            // Clear selected model
            SelectedModel = null;
        }
    }

    private async Task SelectModel(OdooModel model)
    {
        if (model != null)
        {
            // Make a copy to avoid modifying the original in the list
            SelectedModel = new OdooModel
            {
                Model = model.Model,
                Name = model.Name,
                State = model.State,
                IsTransient = model.IsTransient,
                ModuleInfo = model.ModuleInfo
            };

            // Get connection string with the selected database
            var builder = new NpgsqlConnectionStringBuilder(PostgresConnectionString);
            builder.Database = SelectedDatabase;
            var connectionString = builder.ConnectionString;

            // Load fields for the selected model
            SelectedModel.Fields = await DatabaseService.GetOdooFieldsAsync(connectionString, model.Model);
        }
    }

    private async Task NavigateToRelatedModel(string modelName)
    {
        if (!string.IsNullOrEmpty(modelName))
        {
            var relatedModel = Models.FirstOrDefault(m => m.Model == modelName);
            if (relatedModel != null)
            {
                await SelectModel(relatedModel);
            }
        }
    }
} 