@page "/mapping-creator"
@using OdooMapping.Domain.Models
@using OdooMapping.UI.Services
@using Microsoft.Data.SqlClient
@using Npgsql
@inject DatabaseService DatabaseService
@inject MappingService MappingService
@inject NavigationManager NavManager

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h3><i class="bi bi-database-fill-gear me-2"></i>Database Mapping Creator</h3>
                <div>
                    <button class="btn btn-primary" @onclick="SaveMapping" disabled="@(!CanSaveMapping)">
                        <i class="bi bi-save me-1"></i> Save Mapping
                    </button>
                </div>
            </div>
            <hr />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6 mb-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-server me-2"></i>Source SQL Server Database</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Connection String:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="SqlServerConnectionString" placeholder="Server=localhost;Database=mydb;User Id=user;Password=pass;TrustServerCertificate=True;" />
                            <button class="btn btn-outline-primary" @onclick="TestSqlServerConnection">
                                <i class="bi bi-check-circle me-1"></i> Test
                            </button>
                        </div>
                        @if (SqlServerConnectionTested)
                        {
                            <div class="mt-2">
                                <span class="@(SqlServerConnectionValid ? "text-success" : "text-danger")">
                                    <i class="bi @(SqlServerConnectionValid ? "bi-check-circle-fill" : "bi-exclamation-circle-fill")"></i>
                                    @(SqlServerConnectionValid ? "Connection successful!" : "Connection failed!")
                                </span>
                            </div>
                        }
                    </div>

                    @if (SqlServerConnectionValid)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Database:</label>
                                    <select class="form-select" @bind="SelectedSqlServerDatabase" @bind:after="LoadSqlServerTables">
                                        <option value="">-- Select Database --</option>
                                        @foreach (var db in SqlServerDatabases)
                                        {
                                            <option value="@db">@db</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                @if (!string.IsNullOrEmpty(SelectedSqlServerDatabase))
                                {
                                    <div class="form-group mb-3">
                                        <label class="form-label">Table:</label>
                                        <select class="form-select" @bind="SelectedSqlServerTable" @bind:after="LoadSqlServerColumns">
                                            <option value="">-- Select Table --</option>
                                            @foreach (var table in SqlServerTables)
                                            {
                                                <option value="@table">@table</option>
                                            }
                                        </select>
                                    </div>
                                }
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(SelectedSqlServerTable))
                        {
                            <div class="form-group">
                                <label class="form-label d-flex justify-content-between align-items-center">
                                    <span>Select Columns:</span>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="SelectAllSqlServerColumns">Select All</button>
                                </label>
                                <div class="border rounded p-2" style="max-height: 300px; overflow-y: auto;">
                                    @foreach (var column in SqlServerColumns)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @onchange="e => ToggleSqlServerColumn(column, e.Value != null && (bool)e.Value)" />
                                            <label class="form-check-label">@column</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-database me-2"></i>Target Odoo PostgreSQL Database</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Connection String:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="PostgresConnectionString" placeholder="Host=localhost;Port=5432;Database=odoo;Username=odoo;Password=odoo;" />
                            <button class="btn btn-outline-success" @onclick="TestPostgresConnection">
                                <i class="bi bi-check-circle me-1"></i> Test
                            </button>
                        </div>
                        @if (PostgresConnectionTested)
                        {
                            <div class="mt-2">
                                <span class="@(PostgresConnectionValid ? "text-success" : "text-danger")">
                                    <i class="bi @(PostgresConnectionValid ? "bi-check-circle-fill" : "bi-exclamation-circle-fill")"></i>
                                    @(PostgresConnectionValid ? "Connection successful!" : "Connection failed!")
                                </span>
                            </div>
                        }
                    </div>

                    @if (PostgresConnectionValid)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Database:</label>
                                    <select class="form-select" @bind="SelectedPostgresDatabase" @bind:after="LoadPostgresTables">
                                        <option value="">-- Select Database --</option>
                                        @foreach (var db in PostgresDatabases)
                                        {
                                            <option value="@db">@db</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                @if (!string.IsNullOrEmpty(SelectedPostgresDatabase))
                                {
                                    <div class="form-group mb-3">
                                        <label class="form-label">Table:</label>
                                        <select class="form-select" @bind="SelectedPostgresTable" @bind:after="LoadPostgresColumns">
                                            <option value="">-- Select Table --</option>
                                            @foreach (var table in PostgresTables)
                                            {
                                                <option value="@table">@table</option>
                                            }
                                        </select>
                                    </div>
                                }
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(SelectedPostgresTable))
                        {
                            <div class="form-group">
                                <label class="form-label d-flex justify-content-between align-items-center">
                                    <span>Select Columns:</span>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="SelectAllPostgresColumns">Select All</button>
                                </label>
                                <div class="border rounded p-2" style="max-height: 300px; overflow-y: auto;">
                                    @foreach (var column in PostgresColumns)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @onchange="e => TogglePostgresColumn(column, e.Value != null && (bool)e.Value)" />
                                            <label class="form-check-label">@column</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    @if (SelectedSqlServerColumns.Any() && SelectedPostgresColumns.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-arrow-left-right me-2"></i>Field Mappings</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Mapping Name:</label>
                                    <input type="text" class="form-control" @bind="MappingName" placeholder="Enter a name for this mapping" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Description:</label>
                                    <textarea class="form-control" @bind="MappingDescription" placeholder="Enter a description" rows="1"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-12">
                                @if (IsOdooDatabase && OdooFields.Any())
                                {
                                    <div class="alert alert-info">
                                        <div class="d-flex">
                                            <i class="bi bi-info-circle-fill me-2 fs-5"></i>
                                            <div>
                                                <strong>Odoo Database Detected!</strong>
                                                <p class="mb-0">We have detected that your target database is an Odoo database. The mapping tool has loaded information about Odoo field types and relations.</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mb-3">
                            <div>
                                @if (MappingValidationErrors.Any())
                                {
                                    <div class="alert alert-warning py-2 px-3 mb-0">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        <strong>Validation Issues:</strong> @MappingValidationErrors.Count issue(s) found
                                        <button class="btn btn-sm btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#validationErrors">
                                            Show Details
                                        </button>
                                    </div>
                                }
                            </div>
                            <button class="btn btn-outline-info" @onclick="AddFieldMapping">
                                <i class="bi bi-plus-circle me-1"></i> Add Field Mapping
                            </button>
                        </div>

                        @if (MappingValidationErrors.Any())
                        {
                            <div class="collapse mb-3" id="validationErrors">
                                <div class="card card-body bg-light">
                                    <ul class="mb-0">
                                        @foreach (var error in MappingValidationErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }

                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 25%">Source Field</th>
                                        <th style="width: 25%">Target Field</th>
                                        <th style="width: 20%">Transformation</th>
                                        <th style="width: 15%">Default Value</th>
                                        <th style="width: 10%">Field Type</th>
                                        <th style="width: 5%"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var mapping in FieldMappings)
                                    {
                                        <tr class="@(HasFieldMappingWarning(mapping) ? "table-warning" : "")">
                                            <td>
                                                <select class="form-select" @bind="mapping.SourceField">
                                                    <option value="">-- Select Source Field --</option>
                                                    @foreach (var field in SelectedSqlServerColumns)
                                                    {
                                                        <option value="@field">@field</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <select class="form-select" @bind="mapping.TargetField" @bind:after="() => UpdateFieldMappingMetadata(mapping)">
                                                    <option value="">-- Select Target Field --</option>
                                                    @foreach (var field in SelectedPostgresColumns)
                                                    {
                                                        <option value="@field">@field</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <select class="form-select" @bind="mapping.TransformationExpression">
                                                    <option value="">None</option>
                                                    <option value="uppercase">UPPERCASE</option>
                                                    <option value="lowercase">lowercase</option>
                                                    @if (IsOdooDatabase && GetOdooFieldType(mapping.TargetField) == "many2one")
                                                    {
                                                        <option value="lookup_id">Lookup ID by Name</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <input type="text" class="form-control" @bind="mapping.DefaultValue" placeholder="Default" />
                                            </td>
                                            <td>
                                                @if (IsOdooDatabase)
                                                {
                                                    var fieldType = GetOdooFieldType(mapping.TargetField);
                                                    <span class="@GetFieldTypeBadgeClass(fieldType)">
                                                        @GetFieldTypeDisplayName(fieldType)
                                                    </span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFieldMapping(mapping)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (IsOdooDatabase)
                        {
                            <div class="mt-3">
                                <h6>Odoo Relational Field Mapping Tips:</h6>
                                <ul class="small">
                                    <li><strong>Many2one fields</strong> (e.g., <code>partner_id</code>) require an ID value or a name lookup transformation.</li>
                                    <li><strong>One2many fields</strong> are typically not directly mapped; instead, map to the related model.</li>
                                    <li><strong>Many2many fields</strong> require special handling - typically a comma-separated list of IDs.</li>
                                    <li>Use the <a href="/odoo-model-browser" target="_blank">Odoo Model Browser</a> to explore relationships between tables.</li>
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // SQL Server variables
    private string SqlServerConnectionString { get; set; } = "";
    private bool SqlServerConnectionTested { get; set; }
    private bool SqlServerConnectionValid { get; set; }
    private List<string> SqlServerDatabases { get; set; } = new List<string>();
    private string SelectedSqlServerDatabase { get; set; } = "";
    private List<string> SqlServerTables { get; set; } = new List<string>();
    private string SelectedSqlServerTable { get; set; } = "";
    private List<string> SqlServerColumns { get; set; } = new List<string>();
    private List<string> SelectedSqlServerColumns { get; set; } = new List<string>();

    // PostgreSQL variables
    private string PostgresConnectionString { get; set; } = "";
    private bool PostgresConnectionTested { get; set; }
    private bool PostgresConnectionValid { get; set; }
    private List<string> PostgresDatabases { get; set; } = new List<string>();
    private string SelectedPostgresDatabase { get; set; } = "";
    private List<string> PostgresTables { get; set; } = new List<string>();
    private string SelectedPostgresTable { get; set; } = "";
    private List<string> PostgresColumns { get; set; } = new List<string>();
    private List<string> SelectedPostgresColumns { get; set; } = new List<string>();

    // Mapping variables
    private string MappingName { get; set; } = "";
    private string MappingDescription { get; set; } = "";
    private bool TruncateTargetBeforeInsert { get; set; } = false;
    private int BatchSize { get; set; } = 100;
    private bool IsActive { get; set; } = true;
    private List<FieldMapping> FieldMappings { get; set; } = new List<FieldMapping>();

    // Odoo-specific properties
    private bool IsOdooDatabase { get; set; }
    private List<OdooField> OdooFields { get; set; } = new List<OdooField>();
    private List<string> MappingValidationErrors { get; set; } = new List<string>();

    private async Task TestSqlServerConnection()
    {
        try
        {
            SqlServerConnectionValid = await DatabaseService.TestSqlServerConnectionAsync(SqlServerConnectionString);
            SqlServerConnectionTested = true;

            if (SqlServerConnectionValid)
            {
                SqlServerDatabases = await DatabaseService.GetSqlServerDatabasesAsync(SqlServerConnectionString);
            }
        }
        catch
        {
            SqlServerConnectionValid = false;
            SqlServerConnectionTested = true;
        }
    }

    private async Task TestPostgresConnection()
    {
        try
        {
            PostgresConnectionValid = await DatabaseService.TestPostgresConnectionAsync(PostgresConnectionString);
            PostgresConnectionTested = true;

            if (PostgresConnectionValid)
            {
                PostgresDatabases = await DatabaseService.GetPostgresDatabasesAsync(PostgresConnectionString);
            }
        }
        catch
        {
            PostgresConnectionValid = false;
            PostgresConnectionTested = true;
        }
    }

    private async Task LoadSqlServerTables()
    {
        if (!string.IsNullOrEmpty(SelectedSqlServerDatabase))
        {
            var builder = new SqlConnectionStringBuilder(SqlServerConnectionString);
            builder.InitialCatalog = SelectedSqlServerDatabase;

            SqlServerTables = await DatabaseService.GetSqlServerTablesAsync(builder.ConnectionString);
            SelectedSqlServerTable = "";
            SqlServerColumns.Clear();
            SelectedSqlServerColumns.Clear();
        }
    }

    private async Task LoadPostgresTables()
    {
        if (!string.IsNullOrEmpty(SelectedPostgresDatabase))
        {
            var builder = new NpgsqlConnectionStringBuilder(PostgresConnectionString);
            builder.Database = SelectedPostgresDatabase;

            PostgresTables = await DatabaseService.GetPostgresTablesAsync(builder.ConnectionString);
            SelectedPostgresTable = "";
            PostgresColumns.Clear();
            SelectedPostgresColumns.Clear();
        }
    }

    private async Task LoadSqlServerColumns()
    {
        if (!string.IsNullOrEmpty(SelectedSqlServerTable))
        {
            var builder = new SqlConnectionStringBuilder(SqlServerConnectionString);
            builder.InitialCatalog = SelectedSqlServerDatabase;

            SqlServerColumns = await DatabaseService.GetSqlServerColumnsAsync(builder.ConnectionString, SelectedSqlServerTable);
            SelectedSqlServerColumns.Clear();
        }
    }

    private async Task LoadPostgresColumns()
    {
        if (!string.IsNullOrEmpty(SelectedPostgresTable))
        {
            var builder = new NpgsqlConnectionStringBuilder(PostgresConnectionString);
            builder.Database = SelectedPostgresDatabase;
            var connectionString = builder.ConnectionString;

            PostgresColumns = await DatabaseService.GetPostgresColumnsAsync(connectionString, SelectedPostgresTable);
            SelectedPostgresColumns.Clear();
            FieldMappings.Clear();
            OdooFields.Clear();
            
            // Check if this is an Odoo database by attempting to get model information
            try
            {
                // Convert table name to potential Odoo model name (res_partner -> res.partner)
                string potentialModelName = SelectedPostgresTable.Replace("_", ".");
                
                // Try to get fields for this model
                OdooFields = await DatabaseService.GetOdooFieldsAsync(connectionString, potentialModelName);
                
                // If we get fields back, this is an Odoo database
                IsOdooDatabase = OdooFields.Any();
            }
            catch
            {
                IsOdooDatabase = false;
            }
        }
    }

    private void ToggleSqlServerColumn(string column, bool selected)
    {
        if (selected && !SelectedSqlServerColumns.Contains(column))
        {
            SelectedSqlServerColumns.Add(column);
        }
        else if (!selected && SelectedSqlServerColumns.Contains(column))
        {
            SelectedSqlServerColumns.Remove(column);
        }
    }

    private void TogglePostgresColumn(string column, bool selected)
    {
        if (selected && !SelectedPostgresColumns.Contains(column))
        {
            SelectedPostgresColumns.Add(column);
        }
        else if (!selected && SelectedPostgresColumns.Contains(column))
        {
            SelectedPostgresColumns.Remove(column);
        }
    }

    private void SelectAllSqlServerColumns()
    {
        SelectedSqlServerColumns = new List<string>(SqlServerColumns);
        StateHasChanged();
    }

    private void SelectAllPostgresColumns()
    {
        SelectedPostgresColumns = new List<string>(PostgresColumns);
        StateHasChanged();
    }

    private void AddFieldMapping()
    {
        FieldMappings.Add(new FieldMapping());
        StateHasChanged();
    }

    private void RemoveFieldMapping(FieldMapping mapping)
    {
        FieldMappings.Remove(mapping);
        StateHasChanged();
    }

    private bool CanSaveMapping => 
        !string.IsNullOrWhiteSpace(MappingName) && 
        FieldMappings.Any() && 
        FieldMappings.All(m => !string.IsNullOrWhiteSpace(m.SourceField) && !string.IsNullOrWhiteSpace(m.TargetField));

    private async Task SaveMapping()
    {
        // Build connection strings with selected databases
        var sqlServerBuilder = new SqlConnectionStringBuilder(SqlServerConnectionString);
        sqlServerBuilder.InitialCatalog = SelectedSqlServerDatabase;
        
        var postgresBuilder = new NpgsqlConnectionStringBuilder(PostgresConnectionString);
        postgresBuilder.Database = SelectedPostgresDatabase;

        // Create mapping definition
        var mappingDefinition = new MappingDefinition
        {
            Name = MappingName,
            Description = MappingDescription,
            IsActive = IsActive,
            CreatedAt = DateTime.Now,
            
            // Source configuration
            SourceConnectionString = sqlServerBuilder.ConnectionString,
            SourceQuery = $"SELECT {string.Join(", ", SelectedSqlServerColumns)} FROM {SelectedSqlServerTable}",
            
            // Target configuration
            TargetConnectionString = postgresBuilder.ConnectionString,
            TargetTable = SelectedPostgresTable,
            
            // Execution settings
            TruncateTargetBeforeInsert = TruncateTargetBeforeInsert,
            BatchSize = BatchSize,
            
            // Field mappings - update the field mappings to include SourceFieldType and TargetFieldType
            FieldMappings = FieldMappings.Select(m =>
            {
                m.RequiresTransformation = !string.IsNullOrEmpty(m.TransformationExpression);
                m.SourceFieldType = "string"; // Set default for simplicity, can be enhanced
                m.TargetFieldType = "string"; // Set default for simplicity, can be enhanced
                return m;
            }).ToList()
        };

        try
        {
            await MappingService.CreateMappingAsync(mappingDefinition);
            NavManager.NavigateTo("/mappings");
        }
        catch (Exception ex)
        {
            // Handle error - in real app, show error to user
            Console.WriteLine(ex.Message);
        }
    }

    private void UpdateFieldMappingMetadata(FieldMapping mapping)
    {
        if (IsOdooDatabase && !string.IsNullOrEmpty(mapping.TargetField))
        {
            var odooField = OdooFields.FirstOrDefault(f => f.Name == mapping.TargetField || f.GetColumnName() == mapping.TargetField);
            
            if (odooField != null)
            {
                // Update field type in mapping
                mapping.TargetFieldType = odooField.FieldType;
                
                // For many2one fields, suggest appropriate transformation
                if (odooField.FieldType == "many2one" && string.IsNullOrEmpty(mapping.TransformationExpression))
                {
                    mapping.TransformationExpression = "lookup_id";
                }
                
                // For required fields, add validation
                if (odooField.Required && string.IsNullOrEmpty(mapping.DefaultValue))
                {
                    mapping.RequiresDefaultValue = true;
                }
            }
            
            ValidateMappings();
        }
    }

    private void ValidateMappings()
    {
        MappingValidationErrors.Clear();
        
        if (!IsOdooDatabase)
            return;
            
        foreach (var mapping in FieldMappings.Where(m => !string.IsNullOrEmpty(m.TargetField)))
        {
            var odooField = OdooFields.FirstOrDefault(f => f.Name == mapping.TargetField || f.GetColumnName() == mapping.TargetField);
            
            if (odooField == null)
                continue;
                
            // Required field validation
            if (odooField.Required && string.IsNullOrEmpty(mapping.SourceField) && string.IsNullOrEmpty(mapping.DefaultValue))
            {
                MappingValidationErrors.Add($"Field '{odooField.Name}' is required but has no source field or default value");
            }
            
            // Relational field validation
            if (odooField.FieldType == "many2one" && !string.IsNullOrEmpty(mapping.SourceField) && mapping.TransformationExpression != "lookup_id")
            {
                MappingValidationErrors.Add($"Field '{odooField.Name}' is a many2one relation. Consider using the 'Lookup ID by Name' transformation");
            }
            
            if ((odooField.FieldType == "one2many" || odooField.FieldType == "many2many") && !string.IsNullOrEmpty(mapping.SourceField))
            {
                MappingValidationErrors.Add($"Field '{odooField.Name}' is a {odooField.FieldType} relation and may require special handling");
            }
        }
    }

    private bool HasFieldMappingWarning(FieldMapping mapping)
    {
        if (!IsOdooDatabase || string.IsNullOrEmpty(mapping.TargetField))
            return false;
            
        var odooField = OdooFields.FirstOrDefault(f => f.Name == mapping.TargetField || f.GetColumnName() == mapping.TargetField);
        
        if (odooField == null)
            return false;
            
        // Warning for required fields
        if (odooField.Required && string.IsNullOrEmpty(mapping.SourceField) && string.IsNullOrEmpty(mapping.DefaultValue))
            return true;
            
        // Warning for relational fields without transformation
        if (odooField.FieldType == "many2one" && !string.IsNullOrEmpty(mapping.SourceField) && mapping.TransformationExpression != "lookup_id")
            return true;
            
        if ((odooField.FieldType == "one2many" || odooField.FieldType == "many2many") && !string.IsNullOrEmpty(mapping.SourceField))
            return true;
            
        return false;
    }

    private string GetOdooFieldType(string fieldName)
    {
        if (!IsOdooDatabase || string.IsNullOrEmpty(fieldName))
            return "";
            
        var odooField = OdooFields.FirstOrDefault(f => f.Name == fieldName || f.GetColumnName() == fieldName);
        return odooField?.FieldType ?? "";
    }

    private string GetFieldTypeDisplayName(string fieldType)
    {
        switch (fieldType)
        {
            case "char":
            case "text":
                return "Text";
            case "integer":
                return "Integer";
            case "float":
                return "Float";
            case "boolean":
                return "Boolean";
            case "date":
                return "Date";
            case "datetime":
                return "Date & Time";
            case "many2one":
                return "Many→One";
            case "one2many":
                return "One→Many";
            case "many2many":
                return "Many↔Many";
            default:
                return fieldType;
        }
    }

    private string GetFieldTypeBadgeClass(string fieldType)
    {
        switch (fieldType)
        {
            case "many2one":
                return "badge bg-primary";
            case "one2many":
            case "many2many":
                return "badge bg-warning text-dark";
            default:
                return "badge bg-secondary";
        }
    }
} 